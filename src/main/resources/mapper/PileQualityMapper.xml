<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lr.bridge.dao.PileQualityMapper">
  <resultMap id="BaseResultMap" type="com.lr.bridge.pojo.PileQuality">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="struId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pileDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="sediThiDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="vertDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="holeDepthDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="aperDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="mudPropDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="mudSurfDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="rebarDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="conctre" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="fillingFactor" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pileTopDevi" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="pilequalityCheckTime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="isQualify" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>


    <resultMap id="isQualityCountDate" type="com.lr.bridge.vo.EntityCountDateList">
        <id property="checkTime" column="checkTime"/>
        <collection property="entityCounts" ofType="com.lr.bridge.vo.EntityCountDate">
            <result property="isQualify" column="isQualify"/>
            <result property="count" column="count"/>
        </collection>
    </resultMap>



    <sql id="Base_Column_List">
    id, struId, pileDevi, sediThiDevi, vertDevi, holeDepthDevi, aperDevi, mudPropDevi, 
    mudSurfDevi, rebarDevi, conctre, fillingFactor, pileTopDevi, pilequalityCheckTime, 
    isQualify
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from pilequality
    where id = #{id,jdbcType=INTEGER}
    ORDER BY pilequalityCheckTime DESC
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pilequality
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lr.bridge.pojo.PileQuality">
    insert into pilequality (id, struId, pileDevi, 
      sediThiDevi, vertDevi, holeDepthDevi, 
      aperDevi, mudPropDevi, mudSurfDevi, 
      rebarDevi, conctre, fillingFactor, 
      pileTopDevi, pilequalityCheckTime, isQualify
      )
    values (#{id,jdbcType=INTEGER}, #{struId,jdbcType=VARCHAR}, #{pileDevi,jdbcType=VARCHAR}, 
      #{sediThiDevi,jdbcType=VARCHAR}, #{vertDevi,jdbcType=VARCHAR}, #{holeDepthDevi,jdbcType=VARCHAR}, 
      #{aperDevi,jdbcType=VARCHAR}, #{mudPropDevi,jdbcType=VARCHAR}, #{mudSurfDevi,jdbcType=VARCHAR}, 
      #{rebarDevi,jdbcType=VARCHAR}, #{conctre,jdbcType=VARCHAR}, #{fillingFactor,jdbcType=VARCHAR}, 
      #{pileTopDevi,jdbcType=VARCHAR}, #{pilequalityCheckTime,jdbcType=TIMESTAMP}, #{isQualify,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lr.bridge.pojo.PileQuality">
    insert into pilequality
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="struId != null">
        struId,
      </if>
      <if test="pileDevi != null">
        pileDevi,
      </if>
      <if test="sediThiDevi != null">
        sediThiDevi,
      </if>
      <if test="vertDevi != null">
        vertDevi,
      </if>
      <if test="holeDepthDevi != null">
        holeDepthDevi,
      </if>
      <if test="aperDevi != null">
        aperDevi,
      </if>
      <if test="mudPropDevi != null">
        mudPropDevi,
      </if>
      <if test="mudSurfDevi != null">
        mudSurfDevi,
      </if>
      <if test="rebarDevi != null">
        rebarDevi,
      </if>
      <if test="conctre != null">
        conctre,
      </if>
      <if test="fillingFactor != null">
        fillingFactor,
      </if>
      <if test="pileTopDevi != null">
        pileTopDevi,
      </if>
      <if test="pilequalityCheckTime != null">
        pilequalityCheckTime,
      </if>
      <if test="isQualify != null">
        isQualify,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="struId != null">
        #{struId,jdbcType=VARCHAR},
      </if>
      <if test="pileDevi != null">
        #{pileDevi,jdbcType=VARCHAR},
      </if>
      <if test="sediThiDevi != null">
        #{sediThiDevi,jdbcType=VARCHAR},
      </if>
      <if test="vertDevi != null">
        #{vertDevi,jdbcType=VARCHAR},
      </if>
      <if test="holeDepthDevi != null">
        #{holeDepthDevi,jdbcType=VARCHAR},
      </if>
      <if test="aperDevi != null">
        #{aperDevi,jdbcType=VARCHAR},
      </if>
      <if test="mudPropDevi != null">
        #{mudPropDevi,jdbcType=VARCHAR},
      </if>
      <if test="mudSurfDevi != null">
        #{mudSurfDevi,jdbcType=VARCHAR},
      </if>
      <if test="rebarDevi != null">
        #{rebarDevi,jdbcType=VARCHAR},
      </if>
      <if test="conctre != null">
        #{conctre,jdbcType=VARCHAR},
      </if>
      <if test="fillingFactor != null">
        #{fillingFactor,jdbcType=VARCHAR},
      </if>
      <if test="pileTopDevi != null">
        #{pileTopDevi,jdbcType=VARCHAR},
      </if>
      <if test="pilequalityCheckTime != null">
        #{pilequalityCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isQualify != null">
        #{isQualify,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lr.bridge.pojo.PileQuality">
    update pilequality
    <set>
      <if test="struId != null">
        struId = #{struId,jdbcType=VARCHAR},
      </if>
      <if test="pileDevi != null">
        pileDevi = #{pileDevi,jdbcType=VARCHAR},
      </if>
      <if test="sediThiDevi != null">
        sediThiDevi = #{sediThiDevi,jdbcType=VARCHAR},
      </if>
      <if test="vertDevi != null">
        vertDevi = #{vertDevi,jdbcType=VARCHAR},
      </if>
      <if test="holeDepthDevi != null">
        holeDepthDevi = #{holeDepthDevi,jdbcType=VARCHAR},
      </if>
      <if test="aperDevi != null">
        aperDevi = #{aperDevi,jdbcType=VARCHAR},
      </if>
      <if test="mudPropDevi != null">
        mudPropDevi = #{mudPropDevi,jdbcType=VARCHAR},
      </if>
      <if test="mudSurfDevi != null">
        mudSurfDevi = #{mudSurfDevi,jdbcType=VARCHAR},
      </if>
      <if test="rebarDevi != null">
        rebarDevi = #{rebarDevi,jdbcType=VARCHAR},
      </if>
      <if test="conctre != null">
        conctre = #{conctre,jdbcType=VARCHAR},
      </if>
      <if test="fillingFactor != null">
        fillingFactor = #{fillingFactor,jdbcType=VARCHAR},
      </if>
      <if test="pileTopDevi != null">
        pileTopDevi = #{pileTopDevi,jdbcType=VARCHAR},
      </if>
      <if test="pilequalityCheckTime != null">
        pilequalityCheckTime = #{pilequalityCheckTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isQualify != null">
        isQualify = #{isQualify,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lr.bridge.pojo.PileQuality">
    update pilequality
    set struId = #{struId,jdbcType=VARCHAR},
      pileDevi = #{pileDevi,jdbcType=VARCHAR},
      sediThiDevi = #{sediThiDevi,jdbcType=VARCHAR},
      vertDevi = #{vertDevi,jdbcType=VARCHAR},
      holeDepthDevi = #{holeDepthDevi,jdbcType=VARCHAR},
      aperDevi = #{aperDevi,jdbcType=VARCHAR},
      mudPropDevi = #{mudPropDevi,jdbcType=VARCHAR},
      mudSurfDevi = #{mudSurfDevi,jdbcType=VARCHAR},
      rebarDevi = #{rebarDevi,jdbcType=VARCHAR},
      conctre = #{conctre,jdbcType=VARCHAR},
      fillingFactor = #{fillingFactor,jdbcType=VARCHAR},
      pileTopDevi = #{pileTopDevi,jdbcType=VARCHAR},
      pilequalityCheckTime = #{pilequalityCheckTime,jdbcType=TIMESTAMP},
      isQualify = #{isQualify,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>




    <select id="findAll" parameterType="java.lang.Integer"  resultMap="BaseResultMap">
    SELECT
    *
    FROM pilequality where
    isQualify= #{isQualify,jdbcType=INTEGER}
    ORDER BY pilequalityCheckTime DESC
    </select>


    <update id="updateByIsQualify" parameterType="java.lang.Integer">
    update pilequality
    set
      isQualify = #{isQualify,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <select id="selectById"  resultMap="BaseResultMap">
        select
        *
        from pilequality where
        id > 1
        ORDER BY pilequalityCheckTime DESC
    </select>


    <select id="selectByLikeName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        *
        from pilequality where
        struId LIKE CONCAT(CONCAT('%',#{name},'%'))
        ORDER BY pilequalityCheckTime DESC
    </select>

    <select id="selectByLikeNameAndQuality" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        *
        from pilequality where
        struId LIKE CONCAT(CONCAT('%',#{name},'%'))
        AND  (isQualify = 0 OR isQualify = 1)
        ORDER BY pilequalityCheckTime DESC
    </select>



    <select id="selectByLikeNameAndNotQuality" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        *
        from pilequality where
        struId LIKE CONCAT(CONCAT('%',#{name},'%'))
        AND  isQualify = -1
        ORDER BY pilequalityCheckTime DESC

    </select>


    <select id="selectByHasQuality"  resultMap="BaseResultMap">
        select
        *
        from pilequality
        where
        isQualify=0 OR isQualify = 1
        ORDER BY pilequalityCheckTime DESC
    </select>

    <!-- 分组查询-->
    <select id="getIsQualityCountByDate"  parameterType="java.lang.String" resultMap="isQualityCountDate">

          SELECT isQualify,COUNT(*) AS 'count' ,SUBSTR(pilequalityCheckTime,1,10) AS 'checkTime'
                FROM pilequality
                WHERE  pilequalityCheckTime
                BETWEEN #{start}
                AND #{end}
                AND (isQualify = 0 OR isQualify = 1)
                GROUP BY SUBSTR(pilequalityCheckTime,1,10),isQualify


    </select>


    <select id="selectByDate"  parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        *
        from pilequality
        WHERE  pilequalityCheckTime
        BETWEEN #{start}
        AND #{end}
        AND isQualify !=2
        ORDER BY pilequalityCheckTime DESC
    </select>




</mapper>